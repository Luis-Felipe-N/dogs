{"ast":null,"code":"var _jsxFileName = \"/home/luis/projetos/dogs/src/context/UserContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { GET_USER, TOKEN_POST, TOKEN_VALIDATE_POST } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({});\nexport default function UserStorage({\n  children\n}) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [logged, setLogged] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    const autoLogin = async () => {\n      const token = localStorage.getItem(\"token\");\n\n      if (token) {\n        try {\n          setLoading(true);\n          const {\n            url,\n            options\n          } = TOKEN_VALIDATE_POST(token);\n          const response = await fetch(url, options);\n          if (!response.ok) throw new Error(\"Token inválido\");\n          await getUser(token);\n        } catch (error) {} finally {\n          setLogged(false);\n          setLoading(false);\n        }\n      }\n    };\n\n    autoLogin();\n  }, []);\n\n  const getUser = async token => {\n    const {\n      url,\n      options\n    } = GET_USER(token);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    setData(json);\n    setLogged(true);\n    history.push('/');\n  };\n\n  const userLogin = async user => {\n    const {\n      url,\n      options\n    } = TOKEN_POST(user);\n\n    try {\n      setLoading(true);\n      const response = await fetch(url, options);\n      if (!response.ok) throw new Error(`Error: ${response.statusText}`);\n      const {\n        token\n      } = await response.json();\n      localStorage.setItem(\"token\", token);\n      getUser(token);\n    } catch (error) {\n      setLogged(false);\n      setLoading(false);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const userLogout = () => {\n    setLogged(false);\n    setError(false);\n    setLoading(false);\n    setData({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userLogin,\n      data,\n      error,\n      loading,\n      logged,\n      userLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserStorage, \"yAWKRVGG2PDpfBXZQLkD/BujRWk=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserStorage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserStorage\");","map":{"version":3,"sources":["/home/luis/projetos/dogs/src/context/UserContext.tsx"],"names":["createContext","useEffect","useState","useHistory","GET_USER","TOKEN_POST","TOKEN_VALIDATE_POST","UserContext","UserStorage","children","data","setData","loading","setLoading","error","setError","logged","setLogged","history","autoLogin","token","localStorage","getItem","url","options","response","fetch","ok","Error","getUser","json","push","userLogin","user","statusText","setItem","message","userLogout"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\n\nimport { useHistory } from 'react-router-dom'\n\nimport { GET_USER, TOKEN_POST, TOKEN_VALIDATE_POST } from \"../utils/api\";\n\ntype UserStorageProps = {\n  children: ReactNode;\n};\n\ntype UserLoginType = {\n  username: string;\n  password: string;\n};\n\ntype User = {\n  id: number;\n  email: string;\n  nome: string;\n  username: string;\n};\n\ntype DataUserType = {\n  data: User | 1\n}\n\n\nexport const UserContext = createContext({} as any);\n\n\nexport default function UserStorage({ children }: UserStorageProps) {\n  const [data, setData] = useState<DataUserType>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [logged, setLogged]  = useState(false)\n  const history = useHistory()\n\n  useEffect(() => {\n    const autoLogin = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        try {\n          setLoading(true);\n          const { url, options } = TOKEN_VALIDATE_POST(token);\n          const response = await fetch(url, options);\n          if (!response.ok) throw new Error(\"Token inválido\");\n          await getUser(token);\n        } catch (error) {\n        } finally {\n          setLogged(false)\n          setLoading(false);\n        }\n      }\n    };\n\n    autoLogin();\n  }, []);\n\n  const getUser = async (token: string) => {\n    const { url, options } = GET_USER(token);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    setData(json);\n    setLogged(true)\n    history.push('/')\n  };\n\n  const userLogin = async (user: UserLoginType) => {\n    const { url, options } = TOKEN_POST(user);\n\n    try {\n      setLoading(true);\n      const response = await fetch(url, options);\n      if (!response.ok) throw new Error(`Error: ${response.statusText}`);\n      const { token } = await response.json();\n      localStorage.setItem(\"token\", token);\n      getUser(token);\n    } catch (error: any) {\n      setLogged(false)\n      setLoading(false);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const userLogout = () => {\n    setLogged(false)\n    setError(false)\n    setLoading(false)\n    setData({})\n  }\n\n  return (\n    <UserContext.Provider value={{ userLogin, data, error, loading, logged, userLogout }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}