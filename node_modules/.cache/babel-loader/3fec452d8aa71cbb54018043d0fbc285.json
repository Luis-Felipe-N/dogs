{"ast":null,"code":"var _jsxFileName = \"/home/luis/projetos/dogs/src/context/UserContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { GET_USER, TOKEN_POST, TOKEN_VALIDATE_POST } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({});\nexport default function UserStorage({\n  children\n}) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const autoLogin = async () => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        try {\n          setLoading(true);\n          const {\n            url,\n            options\n          } = TOKEN_VALIDATE_POST(token);\n          const response = await fetch(url, options);\n          if (!response.ok) throw new Error('Token inválido');\n          await getUser(token);\n        } catch (error) {} finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    autoLogin();\n  }, []);\n\n  const getUser = async token => {\n    const {\n      url,\n      options\n    } = GET_USER(token);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    setData(json);\n  };\n\n  const userLogin = async user => {\n    const {\n      url,\n      options\n    } = TOKEN_POST(user);\n\n    try {\n      setLoading(true);\n      const response = await fetch(url, options);\n      if (!response.ok) throw new Error(`Error: ${response.statusText}`);\n      const {\n        token\n      } = await response.json();\n      localStorage.setItem(\"token\", token);\n      getUser(token);\n    } catch (error) {\n      error;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userLogin,\n      data\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserStorage, \"F2OaJX15vUB97qEdUxUc6WRowzw=\");\n\n_c = UserStorage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserStorage\");","map":{"version":3,"sources":["/home/luis/projetos/dogs/src/context/UserContext.tsx"],"names":["createContext","useEffect","useState","GET_USER","TOKEN_POST","TOKEN_VALIDATE_POST","UserContext","UserStorage","children","data","setData","loading","setLoading","autoLogin","token","localStorage","getItem","url","options","response","fetch","ok","Error","getUser","error","json","userLogin","user","statusText","setItem"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,mBAA/B,QAA0D,cAA1D;;AAoBA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,EAAD,CAAjC;AAEP,eAAe,SAASO,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAqD;AAAA;;AAChE,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAqBR,QAAQ,CAAQ,IAAR,CAAnC;AACA,QAAM,CAAES,OAAF,EAAWC,UAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,SAAS,GAAG,YAAY;AAC1B,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIF,KAAJ,EAAW;AACR,YAAI;AACAF,UAAAA,UAAU,CAAC,IAAD,CAAV;AACC,gBAAM;AAAEK,YAAAA,GAAF;AAAOC,YAAAA;AAAP,cAAmBb,mBAAmB,CAACS,KAAD,CAA5C;AACA,gBAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAA5B;AACA,cAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AAClB,gBAAMC,OAAO,CAACT,KAAD,CAAb;AACJ,SAND,CAME,OAAOU,KAAP,EAAc,CAEf,CARD,SAQU;AACNZ,UAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACH;AACJ,KAfD;;AAiBAC,IAAAA,SAAS;AACZ,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBF,QAAMU,OAAO,GAAG,MAAOT,KAAP,IAAyB;AACvC,UAAM;AAAEG,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmBf,QAAQ,CAACW,KAAD,CAAjC;AACA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAA5B;AACA,UAAMO,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;AACAf,IAAAA,OAAO,CAACe,IAAD,CAAP;AACD,GALD;;AAQA,QAAMC,SAAS,GAAG,MAAOC,IAAP,IAA+B;AAC/C,UAAM;AAAEV,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmBd,UAAU,CAACuB,IAAD,CAAnC;;AAED,QAAI;AACCf,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAA5B;AACA,UAAK,CAACC,QAAQ,CAACE,EAAf,EAAoB,MAAM,IAAIC,KAAJ,CAAW,UAASH,QAAQ,CAACS,UAAW,EAAxC,CAAN;AACpB,YAAM;AAAEd,QAAAA;AAAF,UAAY,MAAMK,QAAQ,CAACM,IAAT,EAAxB;AACAV,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8Bf,KAA9B;AACAS,MAAAA,OAAO,CAACT,KAAD,CAAP;AACJ,KAPD,CAOE,OAAOU,KAAP,EAAc;AACXA,MAAAA,KAAD;AACH;AACD,GAbD;;AAgBA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEE,MAAAA,SAAF;AAAajB,MAAAA;AAAb,KAA7B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvDuBD,W;;KAAAA,W","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { GET_USER, TOKEN_POST, TOKEN_VALIDATE_POST } from \"../utils/api\";\n\ntype UserStorageProps = {\n  children: ReactNode;\n};\n\ntype UserLoginType = {\n  username: string;\n  password: string;\n};\n\n\ntype User = {\n    id: number,\n    email: string,\n    nome: string,\n    username: string\n}\n\n\nexport const UserContext = createContext({} as any);\n\nexport default function UserStorage({ children }: UserStorageProps) {\n    const [ data, setData ] =  useState<User>( null as any)\n    const [ loading, setLoading ] = useState(false)\n\n\n    useEffect(() => {\n        const autoLogin = async () => {\n            const token = localStorage.getItem('token') \n            if (token) {\n               try {\n                   setLoading(true)\n                    const { url, options } = TOKEN_VALIDATE_POST(token)\n                    const response = await fetch(url, options);\n                    if (!response.ok) throw new Error('Token inválido')\n                    await getUser(token)\n               } catch (error) {\n                   \n               } finally {\n                   setLoading(false)\n               }\n            }\n        }\n\n        autoLogin()\n    }, [])\n\n  const getUser = async (token: string) => {\n    const { url, options } = GET_USER(token);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    setData(json)\n  };\n\n\n  const userLogin = async (user: UserLoginType) => {\n    const { url, options } = TOKEN_POST(user);\n\n   try {\n        setLoading(true)\n        const response = await fetch(url, options);\n        if ( !response.ok ) throw new Error(`Error: ${response.statusText}`)\n        const { token } = await response.json();\n        localStorage.setItem(\"token\", token);\n        getUser(token); \n   } catch (error) {\n       (error)\n   }\n  };\n\n\n  return (\n    <UserContext.Provider value={{ userLogin, data }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}