{"ast":null,"code":"var _jsxFileName = \"/home/luis/projetos/dogs/src/context/UserContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { GET_USER, TOKEN_POST, TOKEN_VALIDATE_POST } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({});\nexport default function UserStorage({\n  children\n}) {\n  _s();\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const autoLogin = async () => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        const {\n          url,\n          options\n        } = TOKEN_VALIDATE_POST(token);\n        const response;\n      }\n    };\n\n    autoLogin();\n  }, []);\n\n  const getUser = async token => {\n    const {\n      url,\n      options\n    } = GET_USER(token);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    setData(json);\n  };\n\n  const userLogin = async user => {\n    const {\n      url,\n      options\n    } = TOKEN_POST(user);\n    const response = await fetch(url, options);\n    const {\n      token\n    } = await response.json();\n    localStorage.setItem(\"token\", token);\n    getUser(token);\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userLogin,\n      data\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserStorage, \"XlEVpDdwvaXoZM+mH7SARlnZ0eI=\");\n\n_c = UserStorage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserStorage\");","map":{"version":3,"sources":["/home/luis/projetos/dogs/src/context/UserContext.tsx"],"names":["createContext","useEffect","useState","GET_USER","TOKEN_POST","TOKEN_VALIDATE_POST","UserContext","UserStorage","children","data","setData","autoLogin","token","localStorage","getItem","url","options","response","getUser","fetch","json","userLogin","user","setItem"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,mBAA/B,QAA0D,cAA1D;;AAoBA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,EAAD,CAAjC;AAEP,eAAe,SAASO,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAqD;AAAA;;AAChE,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAqBR,QAAQ,CAAQ,IAAR,CAAnC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,YAAY;AAC1B,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIF,KAAJ,EAAW;AACP,cAAM;AAAEG,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAmBX,mBAAmB,CAACO,KAAD,CAA5C;AACA,cAAMK,QAAN;AACH;AACJ,KAND;;AAQAN,IAAAA,SAAS;AACZ,GAVQ,EAUN,EAVM,CAAT;;AAYF,QAAMO,OAAO,GAAG,MAAON,KAAP,IAAyB;AACvC,UAAM;AAAEG,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmBb,QAAQ,CAACS,KAAD,CAAjC;AACA,UAAMK,QAAQ,GAAG,MAAME,KAAK,CAACJ,GAAD,EAAMC,OAAN,CAA5B;AACA,UAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACAV,IAAAA,OAAO,CAACU,IAAD,CAAP;AACD,GALD;;AAQA,QAAMC,SAAS,GAAG,MAAOC,IAAP,IAA+B;AAC/C,UAAM;AAAEP,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmBZ,UAAU,CAACkB,IAAD,CAAnC;AAEA,UAAML,QAAQ,GAAG,MAAME,KAAK,CAACJ,GAAD,EAAMC,OAAN,CAA5B;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAY,MAAMK,QAAQ,CAACG,IAAT,EAAxB;AACAP,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BX,KAA9B;AACAM,IAAAA,OAAO,CAACN,KAAD,CAAP;AACD,GAPD;;AAUA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAES,MAAAA,SAAF;AAAaZ,MAAAA;AAAb,KAA7B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvCuBD,W;;KAAAA,W","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { GET_USER, TOKEN_POST, TOKEN_VALIDATE_POST } from \"../utils/api\";\n\ntype UserStorageProps = {\n  children: ReactNode;\n};\n\ntype UserLoginType = {\n  username: string;\n  password: string;\n};\n\n\ntype User = {\n    id: number,\n    email: string,\n    nome: string,\n    username: string\n}\n\n\nexport const UserContext = createContext({} as any);\n\nexport default function UserStorage({ children }: UserStorageProps) {\n    const [ data, setData ] =  useState<User>( null as any)\n\n\n    useEffect(() => {\n        const autoLogin = async () => {\n            const token = localStorage.getItem('token') \n            if (token) {\n                const { url, options } = TOKEN_VALIDATE_POST(token)\n                const response\n            }\n        }\n\n        autoLogin()\n    }, [])\n\n  const getUser = async (token: string) => {\n    const { url, options } = GET_USER(token);\n    const response = await fetch(url, options);\n    const json = await response.json();\n    setData(json)\n  };\n\n\n  const userLogin = async (user: UserLoginType) => {\n    const { url, options } = TOKEN_POST(user);\n\n    const response = await fetch(url, options);\n    const { token } = await response.json();\n    localStorage.setItem(\"token\", token);\n    getUser(token);\n  };\n\n\n  return (\n    <UserContext.Provider value={{ userLogin, data }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}